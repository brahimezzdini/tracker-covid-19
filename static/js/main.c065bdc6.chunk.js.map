{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c065bdc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1qUBa\",\"card\":\"Cards_card__1dOS9\",\"infected\":\"Cards_infected__1w4qV\",\"recovered\":\"Cards_recovered__34JWv\",\"deaths\":\"Cards_deaths__kLtST\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n      if(!confirmed){\r\n            return 'Loading...';\r\n      }\r\n       \r\n       \r\n      return(\r\n      <div className ={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                  <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                        <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                              <Typography variant=\"h5\" >\r\n                                  <CountUp\r\n                                     start={0}\r\n                                     end={confirmed.value}\r\n                                     duration={1.5}\r\n                                     separator=\",\"\r\n                                  />      \r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                              <Typography variant=\"body2\" >Number of active cases of COVID-19</Typography>\r\n                        </CardContent>\r\n                  </Grid>\r\n                  <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom>Recovred</Typography>\r\n                              <Typography variant=\"h5\" >\r\n                              <CountUp\r\n                                     start={0}\r\n                                     end={recovered.value}\r\n                                     duration={1.5}\r\n                                     separator=\",\"\r\n                                  />        \r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                              <Typography variant=\"body2\" >Number of recovred from COVID-19</Typography>\r\n                        </CardContent>\r\n                  </Grid>\r\n                  <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                              <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                              <Typography variant=\"h5\" >\r\n                              <CountUp\r\n                                     start={0}\r\n                                     end={deaths.value}\r\n                                     duration={1.5}\r\n                                     separator=\",\"\r\n                                  />        \r\n                              </Typography>\r\n                              <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                              <Typography variant=\"body2\" >Number of deaths causes of COVID-19</Typography>\r\n                        </CardContent>\r\n                  </Grid>\r\n            </Grid>\r\n      </div>\r\n      )\r\n   \r\n}\r\nexport default Cards;","import axios from 'axios';\r\nimport { CountryPicker } from '../components';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country)=>{\r\n      let changeableUrl = url;\r\n \r\n      if(country){\r\n            changeableUrl =`${url}/countries/${country}`\r\n      }\r\n\r\n      try{\r\n            const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n            \r\n            return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n      }catch(error){\r\n         console.log(error);\r\n      }\r\n\r\n}\r\nexport const fetchDailyData = async () =>{\r\n      try{\r\n            const { data }  = await axios.get(`${url}/daily`);\r\n            \r\n            const modifiedData = data.map(( dailyData ) => ({\r\n                  \r\n                  confirmed: dailyData.confirmed.total, \r\n                  deaths: dailyData.deaths.total, \r\n                  date: dailyData.reportDate, \r\n            }));\r\n            return modifiedData;\r\n\r\n      }catch(error){\r\n         console.log(error);\r\n      }\r\n\r\n}\r\nexport const fetchCountries = async () =>{\r\n      try{\r\n            const {data: {countries}}  = await axios.get(`${url}/countries`);\r\n\r\n            return countries.map((country)=> country.name)\r\n\r\n      }catch(error){\r\n         console.log(error);\r\n      }\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport{ Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\r\n      \r\n      const [ dailyData, setDailyData] = useState({});\r\n\r\n      useEffect(() => {\r\n          const fetchAPI = async () => {\r\n                setDailyData(await fetchDailyData());\r\n            }\r\n\r\n\r\n          fetchAPI();\r\n      },[]);\r\n\r\n      const lineChart = (\r\n         dailyData[0]\r\n          ? (\r\n         <Line\r\n            data={{\r\n                  labels: dailyData.map(({ date }) => date),\r\n                  datasets: [{\r\n                        data: dailyData.map(({ confirmed  }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill:true,\r\n                  }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill:true,\r\n                  }],\r\n                  }}\r\n         />) : null \r\n      );\r\n      console.log(confirmed, recovered , deaths)\r\n      \r\n      const barChar = (\r\n            confirmed\r\n            ?(\r\n                  <Bar\r\n                    data={{\r\n                          labels: ['Infected', 'Recovered', 'Deaths'],\r\n                          datasets: [{\r\n                                label: 'People',\r\n                                backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                                data:[ confirmed.value, recovered.value, deaths.value]\r\n                          }]\r\n\r\n                    }}\r\n                    options={{\r\n                          legend:{display: false},\r\n                          title: {display: true, text:`Current state in ${country}`}\r\n                    }}\r\n                  />\r\n            ) : null\r\n      );        \r\n      \r\n     \r\n      return(\r\n            <div className={styles.container}>\r\n                  {country ? barChar : lineChart}\r\n            </div>\r\n      )\r\n}\r\nexport default Chart;","import React, { useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl} from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker=({handleCountryChange}) =>{\r\n      const [ fetchedCountries, setFetchedCountries] = useState([]);\r\n      useEffect(() => {\r\n         const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n            }\r\n            fetchAPI();\r\n      },[setFetchedCountries]);\r\n         return(\r\n            <FormControl className={styles.formControl}>\r\n                  <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange (e.target.value)}>\r\n                        <option value=\"\">Global</option>\r\n                         {fetchedCountries.map((country, i)=><option key={i} value={country}>{country}</option>)}\r\n                  </NativeSelect>\r\n            </FormControl>\r\n         )\r\n   \r\n}\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n\r\n      state = {\r\n            data: {},\r\n            country:'',\r\n      }\r\n\r\n      async componentDidMount() {\r\n            const fetchedData = await fetchData();\r\n\r\n            this.setState({ data: fetchedData})\r\n      }\r\n\r\n      handleCountryChange = async (country) => {\r\n            const fetchedData = await fetchData(country);\r\n\r\n            this.setState({ data: fetchedData ,country: country})\r\n      }\r\n\r\n      render(){\r\n            const { data,country } = this.state;\r\n\r\n            return(\r\n                  <div className={ styles.container }>\r\n                        \r\n                        <img className={styles.image} src={coronaImage} alt=\"Covid-19\"></img> <a href=\"https://github.com/brahimezzdini/tracker-covid-19\">Download code sources</a>\r\n                        <Cards data={data} />\r\n                        <CountryPicker  handleCountryChange={this.handleCountryChange} />\r\n                        <Chart data={data} country={country}/>\r\n                  </div>\r\n            )\r\n      }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__kFfwq\",\"image\":\"App_image__M3wad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__gPlJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2BeOr\"};"],"sourceRoot":""}